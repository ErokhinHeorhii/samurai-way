{"version":3,"file":"static/js/789.f1e0aab0.chunk.js","mappings":"2JACA,GAAgB,KAAO,sBAAsB,WAAa,4BAA4B,UAAY,2BAA2B,WAAa,4BAA4B,SAAW,0BAA0B,SAAW,0BAA0B,SAAW,0BAA0B,QAAU,yBAAyB,iBAAmB,mC,mBCiC3U,MAvBA,SAAiBA,GACb,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,iBAAKD,UAAWC,EAAAA,KAAhB,WACI,gBAAKD,UAAWC,EAAAA,WAAhB,UACI,gBAAKC,IAAKH,EAAMI,OAAQH,UAAWC,EAAAA,UAAaG,IAAK,WAEzD,iBAAKJ,UAAWC,EAAAA,WAAhB,WACI,gBAAKD,UAAWC,EAAAA,SAAhB,SACKF,EAAMM,WAEX,iBAAKL,UAAWC,EAAAA,SAAhB,cAA8BF,EAAMO,eAI5C,iBAAKN,UAAWC,EAAAA,iBAAhB,cAAsCF,EAAMQ,YACxC,gBAAKL,IAAKM,EAAMJ,IAAK,MAAOJ,UAAWC,EAAAA,kB,sHC1BvD,EAA0B,yBAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAyI,yBAAzI,EAA+K,4BAA/K,EAAsN,0BAAtN,EAAiQ,gCAAjQ,EAAoV,+BAApV,EAA+Z,0B,mBCqB/Z,EAZmB,SAACF,GAChB,IAAIU,EAAO,YAAcV,EAAMW,GAC/B,OACI,iBAAKV,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAiBC,IAAMH,EAAMG,IAAKE,IAAI,SACtD,SAAC,KAAD,CAASJ,UAAWC,EAAWU,GAAIF,EAAMG,gBAAiBX,EAA1D,SAA0EF,EAAMc,W,qEC+CtFC,GAAYC,EAAAA,EAAAA,IAAiB,IAe7BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAChDC,KAAM,wBADkBD,EAbsC,SAAClB,GAC/D,OACI,kBAAMoB,SAAUpB,EAAMqB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOrB,UAAWC,EAAYqB,UAAWC,EAAAA,EAClCC,SAAU,CAACC,EAAAA,GAAcX,GAAcD,KAAK,iBAC5Ca,YAAY,0BAEvB,SAACC,EAAA,EAAD,wBAUZ,EA9DgB,SAAC5B,GACb,MAA4CA,EAAM6B,YAA3CC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,eACnBC,EAAcjC,EAAdiC,WACHC,EAAkBJ,EAAQK,KAAI,SAAAC,GAC9B,OAAO,SAAC,EAAD,CAA0BtB,KAAMsB,EAAKtB,KAAMH,GAAIyB,EAAKzB,GAAIR,IAAKiC,EAAKjC,KAAjDiC,EAAKzB,OAG7B0B,EAAmBN,EAASI,KAAI,SAAAC,GAChC,OAAQ,SAACE,EAAA,EAAD,CAAuBhC,QAAS8B,EAAK9B,QAASK,GAAIyB,EAAKzB,GAAIP,OAAQA,GAArDgC,EAAKzB,OAI3B4B,EAAyBP,EAAeG,KAAI,SAAAC,GAC5C,OAAO,SAACE,EAAA,EAAD,CAAuBhC,QAAS8B,EAAK9B,QAASK,GAAIyB,EAAKzB,GAAIP,OAAQoC,GAArDJ,EAAKzB,OAY9B,OAAQ,+BACA,iBAAKV,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKgC,KAEL,iBAAKjC,UAAWC,EAAhB,WACI,SAACe,EAAD,CAAqBG,SAXf,SAACqB,GACnBR,EAAWQ,EAAOC,mBAWLL,MAEL,gBAAKpC,UAAWC,EAAa,IAAMA,EAAnC,SACKqC,U,UCbrB,GAAiBI,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAtBkB,SAACC,GAEnB,MAAO,CACHhB,YAAagB,EAAMhB,gBAGF,SAACiB,GACtB,MAAO,CACHb,WAAY,SAACS,GACTI,GAASC,EAAAA,EAAAA,IAAwBL,SAczCM,EAAAA,EAFJ,CAGEC,I","sources":["webpack://samurai-way/./src/Profile/MyPost/Post/Message.module.css?dcdf","Profile/MyPost/Post/Message.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Message_item__Q7ld9\",\"itemAvatar\":\"Message_itemAvatar__OJaNm\",\"itemImage\":\"Message_itemImage__yK5js\",\"itemDialog\":\"Message_itemDialog__S9O31\",\"itemName\":\"Message_itemName__5OXyZ\",\"itemPost\":\"Message_itemPost__s-XlX\",\"itemTime\":\"Message_itemTime__1uzKi\",\"imgLike\":\"Message_imgLike__UNl3F\",\"wrapperLikeCount\":\"Message_wrapperLikeCount__zKqGK\"};","import React from 'react'\nimport s from \"./Message.module.css\"\nimport like from \"../../../assets/images/like.jpg\";\n\nexport type TMessageData = {\n    avatar: string\n    name: string\n    message: string\n    time: string\n}\n\nfunction Message(props: any) {\n    return (\n        <div className={s.wrapper}>\n            <div className={s.item}>\n                <div className={s.itemAvatar}>\n                    <img src={props.avatar} className={s.itemImage} alt={\"img\"}></img>\n                </div>\n                <div className={s.itemDialog}>\n                    <div className={s.itemPost}>\n                        {props.message}\n                    </div>\n                    <div className={s.itemTime}> {props.time}</div>\n                </div>\n\n            </div>\n            <div className={s.wrapperLikeCount}> {props.likeCounts}\n                <img src={like} alt={\"img\"} className={s.imgLike}></img>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Message\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Hm0qa\",\"dialogsItem\":\"Dialogs_dialogsItem__ixTIW\",\"dialog\":\"Dialogs_dialog__FPQqg\",\"navLink\":\"Dialogs_navLink__DfZiz\",\"activeLink\":\"Dialogs_activeLink__YJIU4\",\"messages\":\"Dialogs_messages__Tqsge\",\"answerMessages\":\"Dialogs_answerMessages__hMBph\",\"message\":\"Dialogs_message__-loTK\",\"imgForDialogs\":\"Dialogs_imgForDialogs__0GMB8\",\"button\":\"Dialogs_button__eUtlY\",\"textarea\":\"Dialogs_textarea__XiulQ\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: string | number\r\n    src: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img className={s.imgForDialogs} src= {props.src} alt=\"img\"></img>\r\n            <NavLink className={s.navLink} to={path} activeClassName={s.activeLink} >{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem","import React, {ChangeEvent} from \"react\";\nimport SuperButton from \"../../SuperButton/SuperButton\";\nimport s from \"./Dialogs.module.css\"\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport DialogItem from \"./DialogsItem/DialogItem\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/formControls/FormControls\";\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\nimport Message from \"../../Profile/MyPost/Post/Message\";\nimport avatar from '../../assets/images/avatarDialogs.jpg'\nimport  avatarAnswer from '../../assets/images/avatarDialogsAnswer.jpg'\nexport type myDialogsDataType = {\n    id: number\n    name: string\n    src: string\n}\ntype FormDataType = {\n    newMessageBody: string\n}\n\nconst Dialogs = (props: DialogsPropsType) => {\n    const {dialogs, messages, answerMessages} = props.dialogsPage\n    const {addMessage} = props\n    let dialogsElements = dialogs.map(item => {\n        return <DialogItem key={item.id} name={item.name} id={item.id} src={item.src}/>\n    })\n\n    let messagesElements = messages.map(item => {\n        return (<Message key={item.id} message={item.message} id={item.id} avatar={avatar}/>\n        )\n    })\n\n    let answerMessagesElements = answerMessages.map(item => {\n        return <Message key={item.id} message={item.message} id={item.id} avatar={avatarAnswer}/>\n    })\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const text = e.currentTarget ? e.currentTarget.value : \" \"\n    }\n\n    const addNewMessage = (values: FormDataType) => {\n        addMessage(values.newMessageBody)\n\n    }\n\n    return (<>\n            <div className={s.dialogs}>\n                <div className={s.dialogsItem}>\n                    {dialogsElements}\n                </div>\n                <div className={s.messages}>\n                    <AddMessageFormRedax onSubmit={addNewMessage}/>\n                    {messagesElements}\n                </div>\n                <div className={s.messages + ' ' + s.answerMessages }>\n                    {answerMessagesElements}\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst maxLength15=maxLengthCreator(15)\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field className={s.textarea} component={Textarea}\n                       validate={[requiredField,maxLength15]} name=\"newMessageBody\"\n                       placeholder=\"Enter your message\"/>\n            </div>\n            <SuperButton >Add</SuperButton>\n        </form>\n    )\n}\n\nconst AddMessageFormRedax = reduxForm<FormDataType>({\n    form: \"dialogAddMessageForm\"\n})(AddMessageForm)\n\n\nexport default Dialogs\n\n","import {compose, Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {\n    addMessageActionCreater,\n    InitialStateType,\n} from \"../Redux/DialogReducer\";\nimport {AllAppStateType} from \"../Redux/RedaxStore\";\nimport Dialogs from \"./Dialogs\";\nimport React from \"react\";\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirectComponent\";\n\n\ntype MapStateToPropsType = {\n    dialogsPage: InitialStateType\n}\n\ntype MapDispatchToPropsType = {\n    addMessage: (values:string) => void\n}\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\n\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addMessage: (newMessageBody:string) => {\n            dispatch(addMessageActionCreater(newMessageBody))\n        }\n    }\n}\n\n/* Логика проверки на Login вынесена в HOC */\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\n\n// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n// export default DialogsContainer\n\n//добавили финкцию compose  и зарефакторили с ее помощью\nexport default   compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)"],"names":["props","className","s","src","avatar","alt","message","time","likeCounts","like","path","id","to","activeClassName","name","maxLength15","maxLengthCreator","AddMessageFormRedax","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","SuperButton","dialogsPage","dialogs","messages","answerMessages","addMessage","dialogsElements","map","item","messagesElements","Message","answerMessagesElements","avatarAnswer","values","newMessageBody","compose","connect","state","dispatch","addMessageActionCreater","withAuthRedirect","Dialogs"],"sourceRoot":""}