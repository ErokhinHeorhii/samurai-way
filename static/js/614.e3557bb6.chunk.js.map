{"version":3,"file":"static/js/614.e3557bb6.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Profile/MyPost/MyPost.module.css?aeae","webpack://samurai-way/./src/Profile/MyPost/Post/Post.module.css?0f9e","Profile/MyPost/Post/Post.tsx","Profile/MyPost/MyPost.tsx","Profile/MyPost/MyPostContainer.tsx","webpack://samurai-way/./src/Profile/ProfileInfo/ProfileInfo.module.css?da1c","Profile/ProfileInfo/ProfileStatusWithHook.tsx","Profile/ProfileInfo/ProfileDataForm.tsx","Profile/ProfileInfo/ProfileInfo.tsx","Profile/Profile.tsx","Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPost_item__vyBrD\",\"button\":\"MyPost_button__vUZ0f\",\"postsBlock\":\"MyPost_postsBlock__7k129\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ey+XQ\",\"itemMessage\":\"Post_itemMessage__rc2w-\",\"image\":\"Post_image__KR6B7\",\"likeItem\":\"Post_likeItem__Qietn\"};","import s from './Post.module.css'\n\ntype PostType = {\n  message: string\n  likeCounts: string| number\n}\n\nfunction Post(props: PostType) {\n    return (\n\n        <div>\n            <div className={s.item}>\n                <img className={s.image} src=\"https://klike.net/uploads/posts/2019-03/1551511823_2.jpg\"\n                     alt=\"img\"></img>\n                <div className={s.itemMessage}>{props.message}</div>\n            </div>\n            <div className={s.likeItem}>\n                <span>like {props.likeCounts} </span>\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import React from 'react'\nimport s from './MyPost.module.css'\nimport Post from './Post/Post'\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\nimport {Textarea} from \"../../components/common/formControls/FormControls\";\n\nexport type myPostType = {\n    id: string\n    message: string\n    likeCount: number\n}\n\ntype NewPostDataTypeForReduser = {\n    posts: myPostType[]\n}\n\ntype FormDataType = {\n    newPostText: string\n}\n\nexport type postDataType =\n    NewPostDataTypeForReduser &\n    {\n        posts: myPostType[]\n        addPost: (newPostText: string) => void\n    }\n\n\nconst MyPost = React.memo((props: postDataType) => {\n    console.log(\"render\")\n    const {\n        posts,\n        addPost,\n    } = props\n\n    let postsElements = posts.map(item => {\n        return <Post\n            key={item.id}\n            message={item.message}\n            likeCounts={item.likeCount}\n        />\n    })\n\n    const onAddPost = (values: FormDataType) => {\n        addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My Post </h3>\n            <AddPostRedaxForm onSubmit={onAddPost}/>\n            <div>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nconst maxLength20=maxLengthCreator(20)\n\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    //Внутри  функции handleSubmit происходит  отмена действий по умолчанию;\n    //         все данные упаковывает в обьект;\n    //         props.OnSubmit(formData)\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field name=\"newPostText\" placeholder=\"post message\"\n                   component={Textarea} validate={[requiredField,maxLength20]}\n            ></Field>\n        </div>\n        <div>\n            <button>Add</button>\n        </div>\n    </form>;\n}\n\nconst AddPostRedaxForm = reduxForm<FormDataType>({\n    //даем уникальное имя форме\n    form: \"ProfileAddNewPostForm\"\n})(AddNewPostForm)\n\nexport default MyPost","import { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { addPostActionCreater }\nfrom '../../components/Redux/ProfileReducer'\nimport { AllAppStateType } from '../../components/Redux/RedaxStore'\nimport MyPost, { myPostType } from './MyPost'\n\n// export type myPostType = {\n//   id: number\n//   message: string\n//   likeCount: number\n// }\n\n// export type NewPostDataTypeForReduser = {\n//   posts: myPostType[]\n//   newPostText: string\n// }\n\n// export type postDataType = NewPostDataTypeForReduser & {\n//   posts: myPostType[]\n//   newPostText: string\n//   dispatch: (action: AllActionType\n//   ) => void\n// }\n\n// const MyPostContainer = (props: postDataType) => {\n//   const {\n//     posts,\n//     dispatch,\n//     newPostText,\n//   } = props\n\n\n//   const addPost = () => {\n//     // addPost()\n//     dispatch(addPostActionCreater())\n//   }\n\n//   const onPostChange = (text: string) => {\n//     // let text = newPostElement.current ? newPostElement.current.value : \" \"\n//     // updateNewPostText(text)\n//     dispatch(updateNewPostTextActionCreater(text))\n//   }\n\n//   return (\n//     <MyPost\n//       updateNewPostText={onPostChange}\n//       addPost={addPost}\n//       posts={posts}\n//       newPostText={newPostText}\n//     />\n//   )\n// }\ntype MapStateToPropsType = {\n  posts: myPostType[]\n  // newPostText: string\n}\n\ntype MapDispatchToPropsType = {\n  // updateNewPostText: (text: string) => void\n  addPost: (newPostText:string) => void\n}\n\n\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\n  return {\n    posts: state.profilePage.posts\n    // newPostText: state.profilePage.newPostText\n  }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    // updateNewPostText: (text: string) => {\n    //   dispatch(updateNewPostTextActionCreater(text))\n    // },\n    addPost: (newPostText:string) => {\n      dispatch(addPostActionCreater(newPostText))\n    }\n  }\n}\n\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)\n\n\nexport default MyPostContainer","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"ProfileInfo_active__tyUQm\",\"Image\":\"ProfileInfo_Image__xHCKB\",\"discriptionBlock\":\"ProfileInfo_discriptionBlock__eNB8W\",\"wrapperForStatus\":\"ProfileInfo_wrapperForStatus__kaC+P\",\"wrapperImage\":\"ProfileInfo_wrapperImage__SfOYz\",\"avatarImage\":\"ProfileInfo_avatarImage__tf6ae\",\"wrapperName\":\"ProfileInfo_wrapperName__AvrMF\",\"lookingJob\":\"ProfileInfo_lookingJob__WeR6m\",\"contacts\":\"ProfileInfo_contacts__6XKrF\",\"wrapperInput\":\"ProfileInfo_wrapperInput__5hOeb\",\"status\":\"ProfileInfo_status__0pqa4\",\"formError\":\"ProfileInfo_formError__Eszlx\"};","import style from './ProfileInfo.module.css'\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\nimport {ProfileStatusPropsType} from \"./ProfileStatus\";\n\ntype StateType = {\n    editMode: boolean\n    status: string\n}\n\ntype PropsType = {\n    status: string\n    updateStatusThunkCreator: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n    const activateEditMode = () => {\n        /*setState работает асинхронно*/\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        props.updateStatusThunkCreator(status)\n        // setStatus(e.currentTarget.value)\n        setEditMode(false)\n    }\n\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        // props.updateStatusThunkCreator(e.currentTarget.value)\n        setStatus(e.currentTarget.value)\n    }\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    return (\n        <div className={style.wrapperForStatus}>\n            <b>Your status: </b>\n            {!editMode &&\n                <div>\n                    <span className={style.status}  onDoubleClick={activateEditMode}>{props.status || \"Hello from me\"}</span>\n                </div>}\n\n            {editMode &&\n                <div>\n                    <input value={status}\n                           onBlur={deactivateEditMode}\n                           autoFocus={true}\n                           onChange={onChangeStatus}\n                    ></input>\n                </div>\n            }\n\n        </div>)\n}\n\n\nexport default ProfileStatusWithHooks","import s from './ProfileInfo.module.css'\nimport {ProfilePageType} from \"../../components/Redux/ProfileReducer\";\nimport avatarProfile from \"../../assets/images/AvatarForProfile.jpg\"\nimport React from \"react\";\nimport {Input, Textarea} from \"../../components/common/formControls/FormControls\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\n\ntype ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\ntype ProfileDataPropsType = {\n    profile: ProfilePageType\n    isOwner?: boolean\n    goToEditMode?: () => void\n}\nexport type FormDataType = {\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    aboutMe: string\n    contacts: {}\n}\ntype ProfileDataFormType = InjectedFormProps<FormDataType, ProfileDataPropsType> & ProfileDataPropsType\n\nconst ProfileDataForm = ({profile, handleSubmit, error}: ProfileDataFormType) => {\n    return (<form className={s.discriptionBlock} onSubmit={handleSubmit}>\n\n        <div className={s.wrapperImage}>\n            <img className={s.avatarImage} src={profile!.photos.small == null\n                ? avatarProfile\n                : profile!.photos.small} alt={\"img\"}/>\n            <div>\n                <button onClick={() => {\n                }}>save\n                </button>\n            </div>\n        </div>\n\n        <div className={s.wrapperName}><b>Full Name</b>:\n            <Field placeholder={\"Full Name\"}\n                   name={\"fullName\"}\n                   type={\"text\"}\n                   component={Input}\n                   validate={[]}\n            ></Field>\n            <div className={s.lookingJob}><b>Looking for Job</b>:\n                <Field placeholder={\"Looking for job\"}\n                       name={\"lookingForAJob\"}\n                       type={\"checkbox\"}\n                       component={Input}\n                       validate={[]}\n                ></Field>\n            </div>\n\n            <div className={s.lookingJob}>\n                <b>Profession Skills</b>: <Field placeholder={\"Profession Skills\"}\n                                                 name={\"lookingForAJobDescription\"}\n                                                 component={Textarea}\n                                                 validate={[]}\n            ></Field>\n            </div>\n            <div className={s.lookingJob}>\n                <b>About me</b>: <Field placeholder={\"About me\"}\n                                        name={\"aboutMe\"}\n                                        component={Textarea}\n                                        validate={[]}\n            ></Field>\n            </div>\n            <div className={s.lookingJob}>\n                <b>Contacts</b>:{Object.keys(profile!.contacts)\n                .map((item) =>\n                        <div key={item}><b>{item}</b>:\n                            <Field placeholder={item}\n                                   name={\"contacts.\" + item}\n                                   type={\"text\"}\n                                   component={Input}\n                                   validate={[]}\n                            ></Field>\n\n                        </div>\n\n                    // <Contact key={item} contactTitle={item}\n                    //                     contactValue={\n                    //                         profile!.contacts[item as keyof ContactsType]}/>\n                )\n\n            }\n                {error && <div className={s.formError}>{error}</div>}\n            </div>\n        </div>\n    </form>)\n}\n\nconst ProfileProfileDataFormReduxForm = reduxForm<FormDataType, ProfileDataPropsType>({form: \"edit-profile\"})(ProfileDataForm)\n\nexport default ProfileProfileDataFormReduxForm","import s from './ProfileInfo.module.css'\nimport {ProfilePageType} from \"../../components/Redux/ProfileReducer\";\nimport Preloader from \"../../components/common/preloader/Preloader\";\nimport avatarProfile from \"../../assets/images/AvatarForProfile.jpg\"\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHook\";\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\nimport ProfileProfileDataFormReduxForm, {FormDataType} from \"./ProfileDataForm\";\nimport img from '../../assets/images/images.jpg'\n\ntype ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\ntype ProfileDataPropsType = {\n    profile: ProfilePageType\n    isOwner?: boolean\n    goToEditMode?: () => void\n}\ntype ProfileInfoPropsType = {\n    profile: ProfilePageType\n    status: string\n    updateStatusThunkCreator: (status: string) => void\n    isOwner: boolean\n    savePhotoThunkCreator: (file: any) => void\n    saveProfileThunkCreator: (formData: FormDataType) => void\n    isErrorContacts: boolean\n}\nconst ProfileInfo = ({\n                         profile,\n                         status,\n                         updateStatusThunkCreator,\n                         isOwner,\n                         savePhotoThunkCreator,\n                         saveProfileThunkCreator,\n                         isErrorContacts\n                     }: ProfileInfoPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [onSubmitHandler, setonSubmitHandler] = useState<boolean>(false)\n\n    useEffect(() => {\n        if (!isErrorContacts) {\n            setEditMode(false)\n        }  else {\n            setEditMode(true)\n        }\n\n    }, [isErrorContacts, onSubmitHandler])\n\n    if (!profile) {\n        return <div>\n            <img\n                className={s.Image}\n                src = {img}\n                alt=\"img\"></img>\n            <Preloader/>\n        </div>\n    }\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>): void => {\n        if (e.target.files) {\n            savePhotoThunkCreator(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: FormDataType) => {\n        saveProfileThunkCreator(formData)\n        setonSubmitHandler(!onSubmitHandler)\n    }\n\n    return (\n        <div>\n            <div>\n                <img\n                    className={s.Image}\n                    src = {img}\n                    alt=\"img\"></img>\n            </div>\n            {editMode ?\n                <ProfileProfileDataFormReduxForm initialValues={profile} profile={profile}\n                                                 onSubmit={onSubmit}/> :\n                <ProfileData profile={profile} isOwner={isOwner}\n                             goToEditMode={() => setEditMode(true)}/>}\n            <ProfileStatusWithHooks status={status} updateStatusThunkCreator={updateStatusThunkCreator}/>\n            {isOwner && <input className={s.wrapperInput} type={\"file\"} onChange={onMainPhotoSelected}/>}\n        </div>)\n}\n\nexport const Contact = ({contactTitle, contactValue}: ContactsPropsType) => {\n    return (<div>\n        <div className={s.contacts}><b>{contactValue && contactTitle + \":\"}</b> {contactValue}</div>\n    </div>)\n}\n\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\n\n    return (<div className={s.discriptionBlock}>\n        <div className={s.wrapperImage}>\n            <img className={s.avatarImage} src={profile!.photos.small == null\n                ? avatarProfile\n                : profile!.photos.small} alt={\"img\"}/>\n            {isOwner && <button onClick={goToEditMode}>edit</button>}\n        </div>\n        <span className={s.wrapperName}> <b>Full Name</b> : {profile!.fullName}\n            {profile!.lookingForAJob\n                ? <div className={s.lookingJob}><b>Looking for Job</b> : YES </div>\n                : <div className={s.lookingJob}><b>Looking for Job</b> : No </div>\n            }\n            {profile!.lookingForAJobDescription &&\n                <span className={s.lookingJob}>\n                            <b>Profession Skills</b>: {profile!.lookingForAJobDescription}\n                        </span>\n            }\n            <div className={s.lookingJob}>\n                <div className={s.lookingJob}>\n                <b>About me</b>:{profile!.aboutMe}\n            </div>\n                    <b>Contacts</b>:{Object.keys(profile!.contacts)\n                .map((item) => <Contact key={item} contactTitle={item}\n                                        contactValue={\n                                            profile!.contacts[item as keyof ContactsType]}/>)}\n            </div>\n        </span>\n    </div>)\n}\n\nexport default ProfileInfo\n","import MyPostContainer from './MyPost/MyPostContainer'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\nimport {ProfilePageType} from \"../components/Redux/ProfileReducer\";\nimport React from \"react\";\nimport {FormDataType} from \"./ProfileInfo/ProfileDataForm\";\n\ntype PropsType = {\n    profile: ProfilePageType\n    status: string\n    updateStatusThunkCreator: (status: string) => void\n    isOwner: boolean\n    savePhotoThunkCreator:(file:string)=>void\n    saveProfileThunkCreator:(formData:FormDataType)=>void\n    isErrorContacts:boolean\n}\n\nconst Profile = (props: PropsType) => {\n\n    return (<div>\n        <ProfileInfo profile={props.profile} status={props.status}\n                     updateStatusThunkCreator={props.updateStatusThunkCreator}\n                     isOwner={props.isOwner}\n                     savePhotoThunkCreator={props.savePhotoThunkCreator}\n                     saveProfileThunkCreator={props.saveProfileThunkCreator}\n                     isErrorContacts={props.isErrorContacts}\n        />\n        < MyPostContainer/>\n\n    </div>)\n}\nexport default Profile","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getProfileThunkCreator,\n    getStatusThunkCreator,\n    ProfilePageType, savePhotoThunkCreator, saveProfileThunkCreator, updateStatusThunkCreator,\n} from \"../components/Redux/ProfileReducer\";\nimport {AllAppStateType} from \"../components/Redux/RedaxStore\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../HOC/WithAuthRedirectComponent\";\nimport {compose} from \"redux\";\nimport {FormDataType} from \"./ProfileInfo/ProfileDataForm\";\n\ntype WithRouterType = {\n    userId: string\n}\n\ntype MapStateToPropsType = {\n    profile: ProfilePageType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n    isErrorContacts: boolean\n}\n\ntype MapDispatchToPropsType = {\n    getProfileThunkCreator: (userId: string) => void\n    getStatusThunkCreator: (userId: string) => void\n    updateStatusThunkCreator: (status: string) => void\n    savePhotoThunkCreator:(file:string)=>void\n    saveProfileThunkCreator:(formData:FormDataType)=>void\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<WithRouterType>\n\nclass ProfileContainer extends React.Component<ProfilePropsType> {\n\n    refreshProfile() {\n        //получаем userId из props которые прокинули с помощью withRouter (match/params/ userId: XXX)\n        let userId = this.props.match.params.userId\n\n        if (!userId) {\n            //history.push заменяет путь в url напрямую без state\n            userId = this.props.authorizedUserId ?\n                this.props.authorizedUserId.toString() :\n                this.props.history.push(\"/login\")!\n        }\n        this.props.getProfileThunkCreator(userId)\n        this.props.getStatusThunkCreator(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>,\n                       prevState: Readonly<{}>,\n                       snapshot?: any) {\n        //сравниваем текущие пропсы с предыдущими чтобы не было зацикливания\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (<div>\n            <Profile profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatusThunkCreator={this.props.updateStatusThunkCreator}\n                     isOwner={!this.props.match.params.userId}\n                     savePhotoThunkCreator={this.props.savePhotoThunkCreator}\n                     saveProfileThunkCreator ={this.props.saveProfileThunkCreator}\n                     isErrorContacts={this.props.isErrorContacts}\n            />\n        </div>)\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n    isErrorContacts:state.profilePage.isErrorContacts\n})\n\n// export default connect(mapStateToProps, { getProfileThunkCreator})(AuthRedirectComponent);\n//добавили финкцию compose  и зарефакторили с ее помощью\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getProfileThunkCreator, getStatusThunkCreator, updateStatusThunkCreator, savePhotoThunkCreator, saveProfileThunkCreator}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n"],"names":["props","className","s","src","alt","message","likeCounts","MyPost","React","console","log","posts","addPost","postsElements","map","item","likeCount","id","AddPostRedaxForm","onSubmit","values","newPostText","maxLength20","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","requiredField","connect","state","profilePage","dispatch","addPostActionCreater","useState","editMode","setEditMode","status","setStatus","useEffect","style","onDoubleClick","value","onBlur","updateStatusThunkCreator","autoFocus","onChange","e","currentTarget","profile","error","photos","small","avatarProfile","onClick","type","Input","Object","keys","contacts","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","savePhotoThunkCreator","saveProfileThunkCreator","isErrorContacts","onSubmitHandler","setonSubmitHandler","img","Preloader","initialValues","formData","ProfileStatusWithHook","target","files","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getProfileThunkCreator","getStatusThunkCreator","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect"],"sourceRoot":""}