{"version":3,"file":"static/js/940.7134df36.chunk.js","mappings":"gNACA,EAA0B,yBAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAyI,yBAAzI,EAA+K,4BAA/K,EAAsN,0BAAtN,EAAiQ,gCAAjQ,EAA2S,yBAA3S,EAAoV,+BAApV,EAA+Z,0B,mBCqB/Z,EAZmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAiBC,IAAML,EAAMK,IAAKC,IAAI,SACtD,SAAC,KAAD,CAASH,UAAWC,EAAWG,GAAIN,EAAMO,gBAAiBJ,EAA1D,SAA0EJ,EAAMS,WCG5F,EATgB,SAACT,GACb,OAAQ,0BACJ,eAAIG,UAAWC,EAAf,SAA2BJ,EAAMU,a,uCCkDnCC,GAAYC,EAAAA,EAAAA,IAAiB,IAe7BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAChDC,KAAM,wBADkBD,EAbsC,SAACd,GAC/D,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOf,UAAWC,EAAYe,UAAWC,EAAAA,EAClCC,SAAU,CAACC,EAAAA,GAAcX,GAAcF,KAAK,iBAC5Cc,YAAY,0BAEvB,SAACC,EAAA,EAAD,wBAUZ,EA7DgB,SAACxB,GACb,MAA4CA,EAAMyB,YAA3CC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,eACnBC,EAAc7B,EAAd6B,WACHC,EAAkBJ,EAAQK,KAAI,SAAAC,GAC9B,OAAO,SAAC,EAAD,CAA0BvB,KAAMuB,EAAKvB,KAAMP,GAAI8B,EAAK9B,GAAIG,IAAK2B,EAAK3B,KAAjD2B,EAAK9B,OAG7B+B,EAAmBN,EAASI,KAAI,SAAAC,GAChC,OAAQ,SAAC,EAAD,CAAuBtB,QAASsB,EAAKtB,QAASR,GAAI8B,EAAK9B,IAAzC8B,EAAK9B,OAI3BgC,EAAyBN,EAAeG,KAAI,SAAAC,GAC5C,OAAO,SAAC,EAAD,CAAuBtB,QAASsB,EAAKtB,QAASR,GAAI8B,EAAK9B,IAAzC8B,EAAK9B,OAW9B,OAAQ,+BACA,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK0B,KAEL,iBAAK3B,UAAWC,EAAhB,WACI,SAACS,EAAD,CAAqBG,SAVf,SAACmB,GACnBN,EAAWM,EAAOC,mBAULH,MAEL,gBAAK9B,UAAWC,EAAa,IAAMA,EAAnC,SACK8B,U,UCZrB,GAAiBG,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAtBkB,SAACC,GAEnB,MAAO,CACHd,YAAac,EAAMd,gBAGF,SAACe,GACtB,MAAO,CACHX,WAAY,SAACO,GACTI,GAASC,EAAAA,EAAAA,IAAwBL,SAczCM,EAAAA,EAFJ,CAGEC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Hm0qa\",\"dialogsItem\":\"Dialogs_dialogsItem__ixTIW\",\"dialog\":\"Dialogs_dialog__FPQqg\",\"navLink\":\"Dialogs_navLink__DfZiz\",\"activeLink\":\"Dialogs_activeLink__YJIU4\",\"messages\":\"Dialogs_messages__Tqsge\",\"answerMessages\":\"Dialogs_answerMessages__hMBph\",\"message\":\"Dialogs_message__-loTK\",\"imgForDialogs\":\"Dialogs_imgForDialogs__0GMB8\",\"button\":\"Dialogs_button__eUtlY\",\"textarea\":\"Dialogs_textarea__XiulQ\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: string | number\r\n    src: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img className={s.imgForDialogs} src= {props.src} alt=\"img\"></img>\r\n            <NavLink className={s.navLink} to={path} activeClassName={s.activeLink} >{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\nexport type myMessageType = {\r\n    message: string\r\n    id: string | number\r\n}\r\n\r\nconst Message = (props: myMessageType) => {\r\n    return (<div>\r\n        <li className={s.message}>{props.message}</li>\r\n   \r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message","import React, {ChangeEvent} from \"react\";\nimport SuperButton from \"../../SuperButton/SuperButton\";\nimport s from \"./Dialogs.module.css\"\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport DialogItem from \"./DialogsItem/DialogItem\";\nimport Message\n    from \"./Message/Message\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/formControls/FormControls\";\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\n\nexport type myDialogsDataType = {\n    id: number\n    name: string\n    src: string\n}\ntype FormDataType = {\n    newMessageBody: string\n}\n\nconst Dialogs = (props: DialogsPropsType) => {\n    const {dialogs, messages, answerMessages} = props.dialogsPage\n    const {addMessage} = props\n    let dialogsElements = dialogs.map(item => {\n        return <DialogItem key={item.id} name={item.name} id={item.id} src={item.src}/>\n    })\n\n    let messagesElements = messages.map(item => {\n        return (<Message key={item.id} message={item.message} id={item.id}/>\n        )\n    })\n\n    let answerMessagesElements = answerMessages.map(item => {\n        return <Message key={item.id} message={item.message} id={item.id}/>\n    })\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        const text = e.currentTarget ? e.currentTarget.value : \" \"\n    }\n\n    const addNewMessage = (values: FormDataType) => {\n        addMessage(values.newMessageBody)\n    }\n\n    return (<>\n            <div className={s.dialogs}>\n                <div className={s.dialogsItem}>\n                    {dialogsElements}\n                </div>\n                <div className={s.messages}>\n                    <AddMessageFormRedax onSubmit={addNewMessage}/>\n                    {messagesElements}\n                </div>\n                <div className={s.messages + ' ' + s.answerMessages }>\n                    {answerMessagesElements}\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst maxLength15=maxLengthCreator(15)\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field className={s.textarea} component={Textarea}\n                       validate={[requiredField,maxLength15]} name=\"newMessageBody\"\n                       placeholder=\"Enter your message\"/>\n            </div>\n            <SuperButton >Add</SuperButton>\n        </form>\n    )\n}\n\nconst AddMessageFormRedax = reduxForm<FormDataType>({\n    form: \"dialogAddMessageForm\"\n})(AddMessageForm)\n\n\nexport default Dialogs\n\n","import {compose, Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {\n    addMessageActionCreater,\n    InitialStateType,\n} from \"../Redux/DialogReducer\";\nimport {AllAppStateType} from \"../Redux/RedaxStore\";\nimport Dialogs from \"./Dialogs\";\nimport React from \"react\";\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirectComponent\";\n\n\ntype MapStateToPropsType = {\n    dialogsPage: InitialStateType\n}\n\ntype MapDispatchToPropsType = {\n    addMessage: (values:string) => void\n}\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\n\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addMessage: (newMessageBody:string) => {\n            dispatch(addMessageActionCreater(newMessageBody))\n        }\n    }\n}\n\n/* Логика проверки на Login вынесена в HOC */\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\n\n// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n// export default DialogsContainer\n\n//добавили финкцию compose  и зарефакторили с ее помощью\nexport default   compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)"],"names":["props","path","id","className","s","src","alt","to","activeClassName","name","message","maxLength15","maxLengthCreator","AddMessageFormRedax","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","SuperButton","dialogsPage","dialogs","messages","answerMessages","addMessage","dialogsElements","map","item","messagesElements","answerMessagesElements","values","newMessageBody","compose","connect","state","dispatch","addMessageActionCreater","withAuthRedirect","Dialogs"],"sourceRoot":""}