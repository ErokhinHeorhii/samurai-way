{"version":3,"file":"static/js/953.109f53a4.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Profile/MyPost/Post/Message.module.css?dcdf","Profile/MyPost/Post/Message.tsx","webpack://samurai-way/./src/Profile/MyPost/MyPost.module.css?aeae","Profile/MyPost/MyPost.tsx","Profile/MyPost/MyPostContainer.tsx","webpack://samurai-way/./src/Profile/ProfileInfo/ProfileInfo.module.css?da1c","Profile/ProfileInfo/ProfileStatusWithHook.tsx","Profile/ProfileInfo/ProfileDataForm.tsx","Profile/ProfileInfo/ProfileInfo.tsx","Profile/Profile.tsx","Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Message_item__Q7ld9\",\"itemAvatar\":\"Message_itemAvatar__OJaNm\",\"itemImage\":\"Message_itemImage__yK5js\",\"itemDialog\":\"Message_itemDialog__S9O31\",\"itemName\":\"Message_itemName__5OXyZ\",\"itemPost\":\"Message_itemPost__s-XlX\",\"itemTime\":\"Message_itemTime__1uzKi\",\"imgLike\":\"Message_imgLike__UNl3F\",\"wrapperLikeCount\":\"Message_wrapperLikeCount__zKqGK\"};","import React from 'react'\nimport s from \"./Message.module.css\"\nimport like from \"../../../assets/images/like.jpg\";\n\nexport type TMessageData = {\n    avatar: string\n    name: string\n    message: string\n    time: string\n}\n\nfunction Message(props: any) {\n    return (\n        <div className={s.wrapper}>\n            <div className={s.item}>\n                <div className={s.itemAvatar}>\n                    <img src={props.avatar} className={s.itemImage} alt={\"img\"}></img>\n                </div>\n                <div className={s.itemDialog}>\n                    <div className={s.itemPost}>\n                        {props.message}\n                    </div>\n                    <div className={s.itemTime}> {props.time}</div>\n                </div>\n\n            </div>\n            <div className={s.wrapperLikeCount}> {props.likeCounts}\n                <img src={like} alt={\"img\"} className={s.imgLike}></img>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Message\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPost_item__vyBrD\",\"button\":\"MyPost_button__vUZ0f\",\"postsBlock\":\"MyPost_postsBlock__7k129\"};","import React from 'react'\nimport s from './MyPost.module.css'\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\nimport {Textarea} from \"../../components/common/formControls/FormControls\";\nimport Message from \"./Post/Message\";\nimport avatar from '../../assets/images/avatarProfile.jpg'\nimport SuperButton from \"../../SuperButton/SuperButton\";\nimport {useDispatch} from \"react-redux\";\n\nexport type myPostType = {\n    id: string\n    message: string\n    likeCount: number\n}\n\ntype NewPostDataTypeForReduser = {\n    posts: myPostType[]\n}\n\ntype FormDataType = {\n    newPostText: string\n}\n\nexport type postDataType =\n    NewPostDataTypeForReduser &\n    {\n        posts: myPostType[]\n        addPost: (newPostText: string) => void\n    }\n\nconst MyPost = React.memo((props: postDataType) => {\n    const {\n        posts,\n        addPost,\n    } = props\n    const dispatch = useDispatch()\n    let postsElements = posts.map(item => {\n        return <Message\n            key={item.id}\n            avatar={avatar}\n            message={item.message}\n            likeCounts={item.likeCount}\n        />\n    })\n\n    const onAddPost = (values: FormDataType) => {\n        addPost(values.newPostText)\n        dispatch(reset('ProfileAddNewPostForm'))\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My Post </h3>\n            <AddPostRedaxForm onSubmit={onAddPost}/>\n            <div>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nconst maxLength20 = maxLengthCreator(20)\n\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    //Внутри  функции handleSubmit происходит  отмена действий по умолчанию;\n    //         все данные упаковывает в обьект;\n    //         props.OnSubmit(formData)\n\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field name=\"newPostText\" placeholder=\"post message\"\n                   component={Textarea} validate={[requiredField, maxLength20]} style={{width: '200px', resize: 'none'}}\n            ></Field>\n        </div>\n        <div>\n            <SuperButton>Add</SuperButton>\n        </div>\n    </form>;\n}\n\nconst AddPostRedaxForm = reduxForm<FormDataType>({\n    form: \"ProfileAddNewPostForm\"\n})(AddNewPostForm)\n\nexport default MyPost\n","import { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { addPostActionCreater }\nfrom '../../components/Redux/ProfileReducer'\nimport { AllAppStateType } from '../../components/Redux/RedaxStore'\nimport MyPost, { myPostType } from './MyPost'\n\ntype MapStateToPropsType = {\n  posts: myPostType[]\n}\n\ntype MapDispatchToPropsType = {\n  addPost: (newPostText:string) => void\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\n  return {\n    posts: state.profilePage.posts\n  }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n\n    addPost: (newPostText:string) => {\n      dispatch(addPostActionCreater(newPostText))\n    }\n  }\n}\n\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)\n\nexport default MyPostContainer\n","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"ProfileInfo_active__tyUQm\",\"image\":\"ProfileInfo_image__t54ng\",\"discriptionBlock\":\"ProfileInfo_discriptionBlock__eNB8W\",\"wrapperForStatus\":\"ProfileInfo_wrapperForStatus__kaC+P\",\"wrapperImage\":\"ProfileInfo_wrapperImage__SfOYz\",\"avatarImage\":\"ProfileInfo_avatarImage__tf6ae\",\"wrapperName\":\"ProfileInfo_wrapperName__AvrMF\",\"lookingJob\":\"ProfileInfo_lookingJob__WeR6m\",\"contacts\":\"ProfileInfo_contacts__6XKrF\",\"wrapperInput\":\"ProfileInfo_wrapperInput__5hOeb\",\"status\":\"ProfileInfo_status__0pqa4\",\"formError\":\"ProfileInfo_formError__Eszlx\",\"button\":\"ProfileInfo_button__Xi9wH\"};","import style from './ProfileInfo.module.css'\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\nimport {ProfileStatusPropsType} from \"./ProfileStatus\";\n\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        props.updateStatusThunkCreator(status)\n        setEditMode(false)\n    }\n\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    return (\n        <div className={style.wrapperForStatus}>\n            <b>Your status: </b>\n            {!editMode &&\n                <div>\n                    <span className={style.status}  onDoubleClick={activateEditMode}>{props.status || \"Hello from me\"}</span>\n                </div>}\n\n            {editMode &&\n                <div>\n                    <input value={status}\n                           onBlur={deactivateEditMode}\n                           autoFocus={true}\n                           onChange={onChangeStatus}\n                    ></input>\n                </div>\n            }\n\n        </div>)\n}\n\n\nexport default ProfileStatusWithHooks\n","import s from './ProfileInfo.module.css'\nimport {ProfilePageType} from \"../../components/Redux/ProfileReducer\";\nimport avatarProfile from \"../../assets/images/AvatarForProfile.jpg\"\nimport React from \"react\";\nimport {Input, Textarea} from \"../../components/common/formControls/FormControls\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport SuperButton from \"../../SuperButton/SuperButton\";\n\ntype ProfileDataPropsType = {\n    profile: ProfilePageType\n    isOwner?: boolean\n    goToEditMode?: () => void\n}\nexport type FormDataType = {\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    aboutMe: string\n    contacts: {}\n}\ntype ProfileDataFormType = InjectedFormProps<FormDataType, ProfileDataPropsType> & ProfileDataPropsType\n\nconst ProfileDataForm = ({profile, handleSubmit, error}: ProfileDataFormType) => {\n    return (<form className={s.discriptionBlock} onSubmit={handleSubmit}>\n\n        <div className={s.wrapperImage}>\n            <img className={s.avatarImage} src={profile!.photos.small == null\n                ? avatarProfile\n                : profile!.photos.small} alt={\"img\"}/>\n            <div className={s.button}>\n                <SuperButton onClick={() => {\n                }}>save\n                </SuperButton>\n            </div>\n        </div>\n\n        <div className={s.wrapperName}><b>Full Name</b>:\n            <Field placeholder={\"Full Name\"}\n                   name={\"fullName\"}\n                   type={\"text\"}\n                   component={Input}\n                   validate={[]}\n            ></Field>\n            <div className={s.lookingJob}><b>Looking for Job</b>:\n                <Field placeholder={\"Looking for job\"}\n                       name={\"lookingForAJob\"}\n                       type={\"checkbox\"}\n                       component={Input}\n                       validate={[]}\n                ></Field>\n            </div>\n\n            <div className={s.lookingJob}>\n                <b>Profession Skills</b>: <Field placeholder={\"Profession Skills\"}\n                                                 name={\"lookingForAJobDescription\"}\n                                                 component={Textarea}\n                                                 validate={[]}\n            ></Field>\n            </div>\n            <div className={s.lookingJob}>\n                <b>About me</b>: <Field placeholder={\"About me\"}\n                                        name={\"aboutMe\"}\n                                        component={Textarea}\n                                        validate={[]}\n            ></Field>\n            </div>\n            <div className={s.lookingJob}>\n                <b>Contacts</b>:{Object.keys(profile!.contacts)\n                .map((item) =>\n                        <div key={item}><b>{item}</b>:\n                            <Field placeholder={item}\n                                   name={\"contacts.\" + item}\n                                   type={\"text\"}\n                                   component={Input}\n                                   validate={[]}\n                            ></Field>\n\n                        </div>\n                             )\n            }\n                {error && <div className={s.formError}>{error}</div>}\n            </div>\n        </div>\n    </form>)\n}\n\nconst ProfileProfileDataFormReduxForm = reduxForm<FormDataType, ProfileDataPropsType>({form: \"edit-profile\"})(ProfileDataForm)\n\nexport default ProfileProfileDataFormReduxForm\n","import s from './ProfileInfo.module.css'\nimport {ProfilePageType} from \"../../components/Redux/ProfileReducer\";\nimport Preloader from \"../../components/common/preloader/Preloader\";\nimport avatarProfile from \"../../assets/images/AvatarForProfile.jpg\"\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHook\";\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\nimport ProfileProfileDataFormReduxForm, {FormDataType} from \"./ProfileDataForm\";\nimport img from '../../assets/images/images.jpg'\nimport SuperButton from \"../../SuperButton/SuperButton\";\n\ntype ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\ntype ProfileDataPropsType = {\n    profile: ProfilePageType\n    isOwner?: boolean\n    goToEditMode?: () => void\n}\ntype ProfileInfoPropsType = {\n    profile: ProfilePageType\n    status: string\n    updateStatusThunkCreator: (status: string) => void\n    isOwner: boolean\n    savePhotoThunkCreator: (file: any) => void\n    saveProfileThunkCreator: (formData: FormDataType) => void\n    isErrorContacts: boolean\n}\nconst ProfileInfo = ({\n                         profile,\n                         status,\n                         updateStatusThunkCreator,\n                         isOwner,\n                         savePhotoThunkCreator,\n                         saveProfileThunkCreator,\n                         isErrorContacts\n                     }: ProfileInfoPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [onSubmitHandler, setonSubmitHandler] = useState<boolean>(false)\n\n    useEffect(() => {\n        if (!isErrorContacts) {\n            setEditMode(false)\n        }  else {\n            setEditMode(true)\n        }\n\n    }, [isErrorContacts, onSubmitHandler])\n\n    if (!profile) {\n        return <div>\n            <img\n                className={s.Image}\n                src = {img}\n                alt=\"img\"></img>\n            <Preloader/>\n        </div>\n    }\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>): void => {\n        if (e.target.files) {\n            savePhotoThunkCreator(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: FormDataType) => {\n        saveProfileThunkCreator(formData)\n        setonSubmitHandler(!onSubmitHandler)\n    }\n\n    return (\n        <div>\n            <div>\n                <img\n                    className={s.image}\n                    src = {img}\n                    alt=\"img\"></img>\n            </div>\n            {isOwner && <input className={s.wrapperInput} type={\"file\"} onChange={onMainPhotoSelected}/>}\n            {editMode ?\n                <ProfileProfileDataFormReduxForm initialValues={profile} profile={profile}\n                                                 onSubmit={onSubmit}/> :\n                <ProfileData profile={profile} isOwner={isOwner}\n                             goToEditMode={() => setEditMode(true)}/>}\n            <ProfileStatusWithHooks status={status} updateStatusThunkCreator={updateStatusThunkCreator}/>\n\n        </div>)\n}\n\nexport const Contact = ({contactTitle, contactValue}: ContactsPropsType) => {\n    return (<div>\n        <div className={s.contacts}><b>{contactValue && contactTitle + \":\"}</b> {contactValue}</div>\n    </div>)\n}\n\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\n\n    return (<div className={s.discriptionBlock}>\n        <div className={s.wrapperImage}>\n            <img className={s.avatarImage} src={profile!.photos.small == null\n                ? avatarProfile\n                : profile!.photos.small} alt={\"img\"}/>\n            {isOwner && <SuperButton onClick={goToEditMode}>edit</SuperButton>}\n        </div>\n        <span className={s.wrapperName}> <b>Full Name</b> : {profile!.fullName}\n            {profile!.lookingForAJob\n                ? <div className={s.lookingJob}><b>Looking for Job</b> : YES </div>\n                : <div className={s.lookingJob}><b>Looking for Job</b> : No </div>\n            }\n            {profile!.lookingForAJobDescription &&\n                <span className={s.lookingJob}>\n                            <b>Profession Skills</b>: {profile!.lookingForAJobDescription}\n                        </span>\n            }\n            <div className={s.lookingJob}>\n                <div className={s.lookingJob}>\n                <b>About me</b>:{profile!.aboutMe}\n            </div>\n                    <b>Contacts</b>:{Object.keys(profile!.contacts)\n                .map((item) => <Contact key={item} contactTitle={item}\n                                        contactValue={\n                                            profile!.contacts[item as keyof ContactsType]}/>)}\n            </div>\n        </span>\n    </div>)\n}\n\nexport default ProfileInfo\n","import MyPostContainer from './MyPost/MyPostContainer'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\nimport {ProfilePageType} from \"../components/Redux/ProfileReducer\";\nimport React from \"react\";\nimport {FormDataType} from \"./ProfileInfo/ProfileDataForm\";\n\ntype PropsType = {\n    profile: ProfilePageType\n    status: string\n    updateStatusThunkCreator: (status: string) => void\n    isOwner: boolean\n    savePhotoThunkCreator:(file:string)=>void\n    saveProfileThunkCreator:(formData:FormDataType)=>void\n    isErrorContacts:boolean\n}\n\nconst Profile = (props: PropsType) => {\n\n    return (<div>\n        <ProfileInfo profile={props.profile} status={props.status}\n                     updateStatusThunkCreator={props.updateStatusThunkCreator}\n                     isOwner={props.isOwner}\n                     savePhotoThunkCreator={props.savePhotoThunkCreator}\n                     saveProfileThunkCreator={props.saveProfileThunkCreator}\n                     isErrorContacts={props.isErrorContacts}\n        />\n        < MyPostContainer/>\n\n    </div>)\n}\nexport default Profile","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getProfileThunkCreator,\n    getStatusThunkCreator,\n    ProfilePageType, savePhotoThunkCreator, saveProfileThunkCreator, updateStatusThunkCreator,\n} from \"../components/Redux/ProfileReducer\";\nimport {AllAppStateType} from \"../components/Redux/RedaxStore\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../HOC/WithAuthRedirectComponent\";\nimport {compose} from \"redux\";\nimport {FormDataType} from \"./ProfileInfo/ProfileDataForm\";\n\ntype WithRouterType = {\n    userId: string\n}\n\ntype MapStateToPropsType = {\n    profile: ProfilePageType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n    isErrorContacts: boolean\n}\n\ntype MapDispatchToPropsType = {\n    getProfileThunkCreator: (userId: string) => void\n    getStatusThunkCreator: (userId: string) => void\n    updateStatusThunkCreator: (status: string) => void\n    savePhotoThunkCreator:(file:string)=>void\n    saveProfileThunkCreator:(formData:FormDataType)=>void\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<WithRouterType>\n\nclass ProfileContainer extends React.Component<ProfilePropsType> {\n\n    refreshProfile() {\n        //получаем userId из props которые прокинули с помощью withRouter (match/params/ userId: XXX)\n        let userId = this.props.match.params.userId\n\n        if (!userId) {\n            //history.push заменяет путь в url напрямую без state\n            userId = this.props.authorizedUserId ?\n                this.props.authorizedUserId.toString() :\n                this.props.history.push(\"/login\")!\n        }\n        this.props.getProfileThunkCreator(userId)\n        this.props.getStatusThunkCreator(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>,\n                       prevState: Readonly<{}>,\n                       snapshot?: any) {\n        //сравниваем текущие пропсы с предыдущими чтобы не было зацикливания\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (<div>\n            <Profile profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatusThunkCreator={this.props.updateStatusThunkCreator}\n                     isOwner={!this.props.match.params.userId}\n                     savePhotoThunkCreator={this.props.savePhotoThunkCreator}\n                     saveProfileThunkCreator ={this.props.saveProfileThunkCreator}\n                     isErrorContacts={this.props.isErrorContacts}\n            />\n        </div>)\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n    isErrorContacts:state.profilePage.isErrorContacts\n})\n\n// export default connect(mapStateToProps, { getProfileThunkCreator})(AuthRedirectComponent);\n//добавили финкцию compose  и зарефакторили с ее помощью\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getProfileThunkCreator, getStatusThunkCreator, updateStatusThunkCreator, savePhotoThunkCreator, saveProfileThunkCreator}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n"],"names":["props","className","s","src","avatar","alt","message","time","likeCounts","like","MyPost","React","posts","addPost","dispatch","useDispatch","postsElements","map","item","Message","likeCount","id","AddPostRedaxForm","onSubmit","values","newPostText","reset","maxLength20","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","requiredField","style","width","resize","SuperButton","connect","state","profilePage","addPostActionCreater","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onBlur","updateStatusThunkCreator","autoFocus","onChange","e","currentTarget","profile","error","photos","small","avatarProfile","onClick","type","Input","Object","keys","contacts","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","savePhotoThunkCreator","saveProfileThunkCreator","isErrorContacts","onSubmitHandler","setonSubmitHandler","img","Preloader","target","files","initialValues","formData","ProfileStatusWithHook","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getProfileThunkCreator","getStatusThunkCreator","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect"],"sourceRoot":""}