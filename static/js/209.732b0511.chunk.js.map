{"version":3,"file":"static/js/209.732b0511.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Profile/MyPost/MyPost.module.css?aeae","webpack://samurai-way/./src/Profile/MyPost/Post/Post.module.css?0f9e","Profile/MyPost/Post/Post.tsx","Profile/MyPost/MyPost.tsx","Profile/MyPost/MyPostContainer.tsx","webpack://samurai-way/./src/Profile/ProfileInfo/ProfileInfo.module.css?da1c","Profile/ProfileInfo/ProfileStatusWithHook.tsx","Profile/ProfileInfo/ProfileInfo.tsx","Profile/Profile.tsx","Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPost_item__vyBrD\",\"button\":\"MyPost_button__vUZ0f\",\"postsBlock\":\"MyPost_postsBlock__7k129\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ey+XQ\",\"itemMessage\":\"Post_itemMessage__rc2w-\",\"image\":\"Post_image__KR6B7\",\"likeItem\":\"Post_likeItem__Qietn\"};","import s from './Post.module.css'\n\ntype PostType = {\n  message: string\n  likeCounts: string| number\n}\n\nfunction Post(props: PostType) {\n    return (\n\n        <div>\n            <div className={s.item}>\n                <img className={s.image} src=\"https://klike.net/uploads/posts/2019-03/1551511823_2.jpg\"\n                     alt=\"img\"></img>\n                <div className={s.itemMessage}>{props.message}</div>\n            </div>\n            <div className={s.likeItem}>\n                <span>like {props.likeCounts} </span>\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import React from 'react'\nimport s from './MyPost.module.css'\nimport Post from './Post/Post'\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\nimport {Textarea} from \"../../components/common/formControls/FormControls\";\n\nexport type myPostType = {\n    id: string\n    message: string\n    likeCount: number\n}\n\ntype NewPostDataTypeForReduser = {\n    posts: myPostType[]\n}\n\ntype FormDataType = {\n    newPostText: string\n}\n\nexport type postDataType =\n    NewPostDataTypeForReduser &\n    {\n        posts: myPostType[]\n        addPost: (newPostText: string) => void\n    }\n\n\nconst MyPost = React.memo((props: postDataType) => {\n    console.log(\"render\")\n    const {\n        posts,\n        addPost,\n    } = props\n\n    let postsElements = posts.map(item => {\n        return <Post\n            key={item.id}\n            message={item.message}\n            likeCounts={item.likeCount}\n        />\n    })\n\n    const onAddPost = (values: FormDataType) => {\n        addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My Post </h3>\n            <AddPostRedaxForm onSubmit={onAddPost}/>\n            <div>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nconst maxLength20=maxLengthCreator(20)\n\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    //Внутри  функции handleSubmit происходит  отмена действий по умолчанию;\n    //         все данные упаковывает в обьект;\n    //         props.OnSubmit(formData)\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field name=\"newPostText\" placeholder=\"post message\"\n                   component={Textarea} validate={[requiredField,maxLength20]}\n            ></Field>\n        </div>\n        <div>\n            <button>Add</button>\n        </div>\n    </form>;\n}\n\nconst AddPostRedaxForm = reduxForm<FormDataType>({\n    //даем уникальное имя форме\n    form: \"ProfileAddNewPostForm\"\n})(AddNewPostForm)\n\nexport default MyPost","import { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { addPostActionCreater }\nfrom '../../components/Redux/ProfileReducer'\nimport { AllAppStateType } from '../../components/Redux/RedaxStore'\nimport MyPost, { myPostType } from './MyPost'\n\n// export type myPostType = {\n//   id: number\n//   message: string\n//   likeCount: number\n// }\n\n// export type NewPostDataTypeForReduser = {\n//   posts: myPostType[]\n//   newPostText: string\n// }\n\n// export type postDataType = NewPostDataTypeForReduser & {\n//   posts: myPostType[]\n//   newPostText: string\n//   dispatch: (action: AllActionType\n//   ) => void\n// }\n\n// const MyPostContainer = (props: postDataType) => {\n//   const {\n//     posts,\n//     dispatch,\n//     newPostText,\n//   } = props\n\n\n//   const addPost = () => {\n//     // addPost()\n//     dispatch(addPostActionCreater())\n//   }\n\n//   const onPostChange = (text: string) => {\n//     // let text = newPostElement.current ? newPostElement.current.value : \" \"\n//     // updateNewPostText(text)\n//     dispatch(updateNewPostTextActionCreater(text))\n//   }\n\n//   return (\n//     <MyPost\n//       updateNewPostText={onPostChange}\n//       addPost={addPost}\n//       posts={posts}\n//       newPostText={newPostText}\n//     />\n//   )\n// }\ntype MapStateToPropsType = {\n  posts: myPostType[]\n  // newPostText: string\n}\n\ntype MapDispatchToPropsType = {\n  // updateNewPostText: (text: string) => void\n  addPost: (newPostText:string) => void\n}\n\n\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => {\n  return {\n    posts: state.profilePage.posts\n    // newPostText: state.profilePage.newPostText\n  }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    // updateNewPostText: (text: string) => {\n    //   dispatch(updateNewPostTextActionCreater(text))\n    // },\n    addPost: (newPostText:string) => {\n      dispatch(addPostActionCreater(newPostText))\n    }\n  }\n}\n\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)\n\n\nexport default MyPostContainer","// extracted by mini-css-extract-plugin\nexport default {\"active\":\"ProfileInfo_active__tyUQm\",\"Image\":\"ProfileInfo_Image__xHCKB\",\"discriptionBlock\":\"ProfileInfo_discriptionBlock__eNB8W\",\"wrapperForStatus\":\"ProfileInfo_wrapperForStatus__kaC+P\",\"wrapperImage\":\"ProfileInfo_wrapperImage__SfOYz\",\"avatarImage\":\"ProfileInfo_avatarImage__tf6ae\",\"wrapperName\":\"ProfileInfo_wrapperName__AvrMF\",\"lookingJob\":\"ProfileInfo_lookingJob__WeR6m\"};","import style from './ProfileInfo.module.css'\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\nimport {ProfileStatusPropsType} from \"./ProfileStatus\";\n\ntype StateType = {\n    editMode: boolean\n    status: string\n}\n\ntype PropsType = {\n    status: string\n    updateStatusThunkCreator: (status: string) => void\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n    const activateEditMode = () => {\n        /*setState работает асинхронно*/\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n    }\n\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        props.updateStatusThunkCreator(e.currentTarget.value)\n        setStatus(e.currentTarget.value)\n    }\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    return (\n        <div className={style.wrapperForStatus}>\n\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{status || \"Hello from me\"}</span>\n                </div>}\n\n            {editMode &&\n                <div>\n                    <input value={status}\n                           onBlur={deactivateEditMode}\n                           autoFocus={true}\n                           onChange={onChangeStatus}\n                    ></input>\n                </div>\n            }\n\n        </div>)\n}\n\n\nexport default ProfileStatusWithHooks","import s from './ProfileInfo.module.css'\nimport {ProfilePageType} from \"../../components/Redux/ProfileReducer\";\nimport Preloader from \"../../components/common/preloader/Preloader\";\nimport avatarProfile from \"../../assets/images/AvatarForProfile.jpg\"\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHook\";\n\ntype PropsType = {\n    profile: ProfilePageType\n    status: string\n    updateStatusThunkCreator: (status: string) => void\n}\nconst ProfileInfo = ({profile, status, updateStatusThunkCreator}: PropsType) => {\n    if (!profile) {\n        return <div>\n            <img\n                className={s.Image}\n                src=\"https://klike.net/uploads/posts/2019-06/1561526578_1.jpg\"\n                alt=\"img\"></img>\n            <Preloader/>\n        </div>\n    }\n    return (<div>\n        <div>\n            <img\n                className={s.Image}\n                src=\"https://klike.net/uploads/posts/2019-06/1561526578_1.jpg\"\n                alt=\"img\"></img>\n        </div>\n        <div className={s.discriptionBlock}>\n            <div className={s.wrapperImage}>\n                <img className={s.avatarImage} src={profile.photos.small == null\n                    ? avatarProfile\n                    : profile.photos.small}/>\n            </div>\n            <span className={s.wrapperName}>{profile.fullName}\n                {profile.lookingForAJob\n                    ? <div className={s.lookingJob}> Looking for Job : YES </div>\n                    : <div className={s.lookingJob}> Looking for Job : No </div>\n                }</span>\n\n        </div>\n        <ProfileStatusWithHooks status={status} updateStatusThunkCreator={updateStatusThunkCreator}/>\n\n    </div>)\n}\nexport default ProfileInfo","import MyPostContainer from './MyPost/MyPostContainer'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\nimport {ProfilePageType} from \"../components/Redux/ProfileReducer\";\nimport React from \"react\";\n\n\ntype PropsType = {\n    profile: ProfilePageType\n    status: string\n    updateStatusThunkCreator: (status: string) => void\n}\n\n\nconst Profile = (props: PropsType) => {\n\n    return (<div>\n        <ProfileInfo profile={props.profile} status={props.status}\n                     updateStatusThunkCreator={props.updateStatusThunkCreator}/>\n        < MyPostContainer/>\n\n    </div>)\n}\nexport default Profile","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getProfileThunkCreator,\n    getStatusThunkCreator,\n    ProfilePageType, updateStatusThunkCreator,\n} from \"../components/Redux/ProfileReducer\";\nimport {AllAppStateType} from \"../components/Redux/RedaxStore\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../HOC/WithAuthRedirectComponent\";\nimport {compose} from \"redux\";\n\ntype WithRouterType = {\n    userId: string\n}\n\ntype MapStateToPropsType = {\n    profile: ProfilePageType\n    status:string\n    authorizedUserId:number|null\n    isAuth:boolean\n}\ntype MapDispatchToPropsType = {\n    getProfileThunkCreator: (userId: string) => void\n    getStatusThunkCreator:(userId: string)=> void\n    updateStatusThunkCreator:(status: string)=>void\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<WithRouterType>\n\n\nclass ProfileContainer extends React.Component<ProfilePropsType> {\n\n    componentDidMount() {\n        //получаем userId из props которые прокинули с помощью withRouter (match/params/ userId: XXX)\n        let userId = this.props.match.params.userId\n        if(!userId) {\n            //history.push заменяет путь в url напрямую без state\n            userId = this.props.authorizedUserId ? this.props.authorizedUserId.toString() : this.props.history.push(\"/login\")!\n        }\n\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`)\n// userApi.getProfile(userId)\n//             .then(res => {\n//                 this.props.setUserProfile(res.data)\n//             })\n\n//        перенесли логику в Thunk\n        this.props.getProfileThunkCreator(userId)\n        this.props.getStatusThunkCreator(userId)\n\n\n    }\n\n    render() {\n        // if(!this.props.isAuth ) {\n        //     return <Redirect to ={\"./login\"}/>\n        // }\n        return (<div>\n            <Profile profile={this.props.profile}\n                     status ={this.props.status}\n                     updateStatusThunkCreator ={this.props.updateStatusThunkCreator}\n            />\n        </div>)\n    }\n}\n\nlet mapStateToProps = (state: AllAppStateType): MapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    // isAuth: state.auth.isAuth\n    status:state.profilePage.status,\n    authorizedUserId:state.auth.userId,\n    isAuth:state.auth.isAuth\n})\n\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\n\n/* Логика проверки на Login вынесена в HOC */\n// let AuthRedirectComponent = withAuthRedirect(WithUrlDataContainerComponent)\n\n// export default connect(mapStateToProps, { getProfileThunkCreator})(AuthRedirectComponent);\n\n//добавили финкцию compose  и зарефакторили с ее помощью\nexport default compose <React.ComponentType>(\n    connect(mapStateToProps, {getProfileThunkCreator,getStatusThunkCreator,updateStatusThunkCreator}),\n        withRouter,\n        withAuthRedirect\n)(ProfileContainer)"],"names":["props","className","s","src","alt","message","likeCounts","MyPost","React","console","log","posts","addPost","postsElements","map","item","likeCount","id","AddPostRedaxForm","onSubmit","values","newPostText","maxLength20","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","requiredField","connect","state","profilePage","dispatch","addPostActionCreater","useState","editMode","setEditMode","status","setStatus","useEffect","style","onDoubleClick","value","onBlur","autoFocus","onChange","e","updateStatusThunkCreator","currentTarget","profile","photos","small","avatarProfile","fullName","lookingForAJob","ProfileStatusWithHook","Preloader","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getProfileThunkCreator","getStatusThunkCreator","compose","auth","isAuth","withRouter","withAuthRedirect"],"sourceRoot":""}